# Generated by Django 4.2.24 on 2025-09-22 21:28

from django.db import migrations


def link_posts_to_authors(apps, schema_editor):
    """Link BlogPost records to corresponding Author records."""
    BlogPost = apps.get_model('domain_finder', 'BlogPost')
    Author = apps.get_model('domain_finder', 'Author')
    
    for post in BlogPost.objects.all():
        if post.author.strip():
            try:
                # Find the Author record with matching name
                author_obj = Author.objects.get(name=post.author.strip())
                post.author_new = author_obj
                post.save()
            except Author.DoesNotExist:
                # If author doesn't exist, create one
                author_obj, created = Author.objects.get_or_create(
                    name=post.author.strip(),
                    defaults={
                        'bio': '',
                        'avatar': '',
                        'is_active': True,
                    }
                )
                post.author_new = author_obj
                post.save()


def reverse_link_posts_to_authors(apps, schema_editor):
    """Remove links from posts to authors."""
    BlogPost = apps.get_model('domain_finder', 'BlogPost')
    for post in BlogPost.objects.all():
        post.author_new = None
        post.save()


class Migration(migrations.Migration):

    dependencies = [
        ('domain_finder', '0020_add_author_fk_field'),
    ]

    operations = [
        migrations.RunPython(link_posts_to_authors, reverse_link_posts_to_authors),
    ]
